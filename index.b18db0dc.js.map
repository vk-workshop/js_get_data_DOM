{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCCA,I,EAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAiB,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAC3C,EAAW,SAAS,aAAa,CAAC,UAClC,EAAa,SAAS,aAAa,CAAC,YAEpC,EAAc,EAAE,CAEtB,EAAW,OAAO,CAAC,SAAA,CAAnB,EAA8B,OAAA,EAC3B,IAAI,CAAC,SAAS,EAAQ,WAAW,CAAC,UAAU,CAAC,IAAK,K,GAGrD,IAAI,EAAQ,EAAY,MAAM,CAAC,SAAC,CAAA,CAAK,CAArC,EAA8C,OAAA,EAAM,C,GAChD,EAAU,EAAQ,EAAY,MAAM,CAExC,SAAS,EAAkB,CAAK,EAI9B,IAAK,IAHD,EAAY,AAAA,CAAA,GAAK,CAAA,EAAO,KAAK,CAAC,IAAI,OAAO,GACzC,EAAM,GAED,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,IACzB,IAAN,GAAW,EAAI,GAAM,GACvB,CAAA,GAAO,GADT,EAGA,GAAO,CAAQ,CAAC,EAAE,CAGpB,OAAO,EAAI,KAAK,CAAC,IAAI,OAAO,GAAG,IAAI,CAAC,GACtC,CAEA,EAAS,WAAW,CAAI,UAAkC,MAAA,CAAzB,EAAkB,IACnD,EAAW,WAAW,CAAI,YAAsC,MAAA,CAA3B,EAAkB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar population = _to_consumable_array(document.querySelectorAll(\".population\"));\nvar totalTag = document.querySelector(\".total\");\nvar averageTag = document.querySelector(\".average\");\nvar valuesArray = [];\npopulation.forEach(function(country) {\n    return valuesArray.push(parseInt(country.textContent.replaceAll(\",\", \"\")));\n});\nvar total = valuesArray.reduce(function(acc, curr) {\n    return acc + curr;\n});\nvar average = total / valuesArray.length;\nfunction preparePopulation(param) {\n    var prepared = (\"\" + param).split(\"\").reverse();\n    var res = \"\";\n    for(var i = 0; i < prepared.length; i++){\n        if (i !== 0 && i % 3 === 0) res += \",\";\n        res += prepared[i];\n    }\n    return res.split(\"\").reverse().join(\"\");\n}\ntotalTag.textContent = \"Total: \".concat(preparePopulation(total));\naverageTag.textContent = \"Average: \".concat(preparePopulation(average));\n\n//# sourceMappingURL=index.b18db0dc.js.map\n","'use strict';\nconst population = [...document.querySelectorAll('.population')];\nconst totalTag = document.querySelector('.total');\nconst averageTag = document.querySelector('.average');\n\nconst valuesArray = [];\n\npopulation.forEach(country => valuesArray\n  .push(parseInt(country.textContent.replaceAll(',', '')))\n)\n\nlet total = valuesArray.reduce((acc, curr) => acc + curr);\nlet average = total / valuesArray.length;\n\nfunction preparePopulation(param) {\n  let prepared = ('' + param).split('').reverse();\n  let res = '';\n\n  for (let i = 0; i < prepared.length; i++) {\n    if (i !== 0 && i % 3 === 0) {\n      res += ',';\n    }\n    res += prepared[i];\n  }\n\n  return res.split('').reverse().join('');\n}\n\ntotalTag.textContent = `Total: ${preparePopulation(total)}`;\naverageTag.textContent = `Average: ${preparePopulation(average)}`;\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","population","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","totalTag","querySelector","averageTag","valuesArray","forEach","country","push","parseInt","textContent","replaceAll","total","reduce","acc","curr","average","preparePopulation","param","prepared","split","reverse","res","join","concat"],"version":3,"file":"index.b18db0dc.js.map"}